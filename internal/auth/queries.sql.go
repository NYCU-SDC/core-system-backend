// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package auth

import (
	"context"

	"github.com/google/uuid"
)

const createOAuthProvider = `-- name: CreateOAuthProvider :one
INSERT INTO oauth_providers (user_id, provider, client_id, client_secret, redirect_uri) 
VALUES ($1, $2, $3, $4, $5)
RETURNING id, user_id, provider, client_id, client_secret, redirect_uri, created_at, updated_at
`

type CreateOAuthProviderParams struct {
	UserID       uuid.UUID
	Provider     string
	ClientID     string
	ClientSecret string
	RedirectUri  string
}

func (q *Queries) CreateOAuthProvider(ctx context.Context, arg CreateOAuthProviderParams) (OauthProvider, error) {
	row := q.db.QueryRow(ctx, createOAuthProvider,
		arg.UserID,
		arg.Provider,
		arg.ClientID,
		arg.ClientSecret,
		arg.RedirectUri,
	)
	var i OauthProvider
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Provider,
		&i.ClientID,
		&i.ClientSecret,
		&i.RedirectUri,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOAuthProvider = `-- name: DeleteOAuthProvider :exec
DELETE FROM oauth_providers WHERE id = $1
`

func (q *Queries) DeleteOAuthProvider(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteOAuthProvider, id)
	return err
}

const getOAuthProviderByUserID = `-- name: GetOAuthProviderByUserID :many
SELECT id, user_id, provider, client_id, client_secret, redirect_uri, created_at, updated_at FROM oauth_providers WHERE user_id = $1
`

func (q *Queries) GetOAuthProviderByUserID(ctx context.Context, userID uuid.UUID) ([]OauthProvider, error) {
	rows, err := q.db.Query(ctx, getOAuthProviderByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OauthProvider
	for rows.Next() {
		var i OauthProvider
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Provider,
			&i.ClientID,
			&i.ClientSecret,
			&i.RedirectUri,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
