// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package example

import (
	"context"

	"github.com/google/uuid"
)

const create = `-- name: Create :one
INSERT INTO scoreboards (name) VALUES ($1) RETURNING id, name, created_at, updated_at
`

func (q *Queries) Create(ctx context.Context, name string) (Scoreboard, error) {
	row := q.db.QueryRow(ctx, create, name)
	var i Scoreboard
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const delete = `-- name: Delete :exec
DELETE FROM scoreboards WHERE id = $1
`

func (q *Queries) Delete(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, delete, id)
	return err
}

const getAll = `-- name: GetAll :many
SELECT id, name, created_at, updated_at FROM scoreboards
`

func (q *Queries) GetAll(ctx context.Context) ([]Scoreboard, error) {
	rows, err := q.db.Query(ctx, getAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Scoreboard
	for rows.Next() {
		var i Scoreboard
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getByID = `-- name: GetByID :one
SELECT id, name, created_at, updated_at FROM scoreboards WHERE id = $1
`

func (q *Queries) GetByID(ctx context.Context, id uuid.UUID) (Scoreboard, error) {
	row := q.db.QueryRow(ctx, getByID, id)
	var i Scoreboard
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const update = `-- name: Update :one
UPDATE scoreboards SET name = $2, updated_at = CURRENT_TIMESTAMP WHERE id = $1 RETURNING id, name, created_at, updated_at
`

type UpdateParams struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) (Scoreboard, error) {
	row := q.db.QueryRow(ctx, update, arg.ID, arg.Name)
	var i Scoreboard
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
