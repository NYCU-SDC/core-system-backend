// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	question "NYCU-SDC/core-system-backend/internal/form/question"
	context "context"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Querier is an autogenerated mock type for the Querier type
type Querier struct {
	mock.Mock
}

type Querier_Expecter struct {
	mock *mock.Mock
}

func (_m *Querier) EXPECT() *Querier_Expecter {
	return &Querier_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, params
func (_m *Querier) Create(ctx context.Context, params question.CreateParams) (question.Question, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 question.Question
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, question.CreateParams) (question.Question, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, question.CreateParams) question.Question); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(question.Question)
	}

	if rf, ok := ret.Get(1).(func(context.Context, question.CreateParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Querier_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - params question.CreateParams
func (_e *Querier_Expecter) Create(ctx interface{}, params interface{}) *Querier_Create_Call {
	return &Querier_Create_Call{Call: _e.mock.On("Create", ctx, params)}
}

func (_c *Querier_Create_Call) Run(run func(ctx context.Context, params question.CreateParams)) *Querier_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(question.CreateParams))
	})
	return _c
}

func (_c *Querier_Create_Call) Return(_a0 question.Question, _a1 error) *Querier_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_Create_Call) RunAndReturn(run func(context.Context, question.CreateParams) (question.Question, error)) *Querier_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, params
func (_m *Querier) Delete(ctx context.Context, params question.DeleteParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, question.DeleteParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Querier_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Querier_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - params question.DeleteParams
func (_e *Querier_Expecter) Delete(ctx interface{}, params interface{}) *Querier_Delete_Call {
	return &Querier_Delete_Call{Call: _e.mock.On("Delete", ctx, params)}
}

func (_c *Querier_Delete_Call) Run(run func(ctx context.Context, params question.DeleteParams)) *Querier_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(question.DeleteParams))
	})
	return _c
}

func (_c *Querier_Delete_Call) Return(_a0 error) *Querier_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Querier_Delete_Call) RunAndReturn(run func(context.Context, question.DeleteParams) error) *Querier_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *Querier) GetByID(ctx context.Context, id uuid.UUID) (question.Question, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 question.Question
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (question.Question, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) question.Question); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(question.Question)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type Querier_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *Querier_Expecter) GetByID(ctx interface{}, id interface{}) *Querier_GetByID_Call {
	return &Querier_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *Querier_GetByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *Querier_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Querier_GetByID_Call) Return(_a0 question.Question, _a1 error) *Querier_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (question.Question, error)) *Querier_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// ListByFormID provides a mock function with given fields: ctx, formID
func (_m *Querier) ListByFormID(ctx context.Context, formID uuid.UUID) ([]question.Question, error) {
	ret := _m.Called(ctx, formID)

	if len(ret) == 0 {
		panic("no return value specified for ListByFormID")
	}

	var r0 []question.Question
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]question.Question, error)); ok {
		return rf(ctx, formID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []question.Question); ok {
		r0 = rf(ctx, formID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]question.Question)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, formID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_ListByFormID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByFormID'
type Querier_ListByFormID_Call struct {
	*mock.Call
}

// ListByFormID is a helper method to define mock.On call
//   - ctx context.Context
//   - formID uuid.UUID
func (_e *Querier_Expecter) ListByFormID(ctx interface{}, formID interface{}) *Querier_ListByFormID_Call {
	return &Querier_ListByFormID_Call{Call: _e.mock.On("ListByFormID", ctx, formID)}
}

func (_c *Querier_ListByFormID_Call) Run(run func(ctx context.Context, formID uuid.UUID)) *Querier_ListByFormID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Querier_ListByFormID_Call) Return(_a0 []question.Question, _a1 error) *Querier_ListByFormID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_ListByFormID_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]question.Question, error)) *Querier_ListByFormID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, params
func (_m *Querier) Update(ctx context.Context, params question.UpdateParams) (question.Question, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 question.Question
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, question.UpdateParams) (question.Question, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, question.UpdateParams) question.Question); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(question.Question)
	}

	if rf, ok := ret.Get(1).(func(context.Context, question.UpdateParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Querier_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - params question.UpdateParams
func (_e *Querier_Expecter) Update(ctx interface{}, params interface{}) *Querier_Update_Call {
	return &Querier_Update_Call{Call: _e.mock.On("Update", ctx, params)}
}

func (_c *Querier_Update_Call) Run(run func(ctx context.Context, params question.UpdateParams)) *Querier_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(question.UpdateParams))
	})
	return _c
}

func (_c *Querier_Update_Call) Return(_a0 question.Question, _a1 error) *Querier_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_Update_Call) RunAndReturn(run func(context.Context, question.UpdateParams) (question.Question, error)) *Querier_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewQuerier creates a new instance of Querier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *Querier {
	mock := &Querier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
