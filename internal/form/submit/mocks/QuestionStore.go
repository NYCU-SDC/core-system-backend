// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"NYCU-SDC/core-system-backend/internal/form/question"
	"context"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockQuestionStore creates a new instance of MockQuestionStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQuestionStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQuestionStore {
	mock := &MockQuestionStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockQuestionStore is an autogenerated mock type for the QuestionStore type
type MockQuestionStore struct {
	mock.Mock
}

type MockQuestionStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQuestionStore) EXPECT() *MockQuestionStore_Expecter {
	return &MockQuestionStore_Expecter{mock: &_m.Mock}
}

// ListByFormID provides a mock function for the type MockQuestionStore
func (_mock *MockQuestionStore) ListByFormID(ctx context.Context, formID uuid.UUID) ([]question.Answerable, error) {
	ret := _mock.Called(ctx, formID)

	if len(ret) == 0 {
		panic("no return value specified for ListByFormID")
	}

	var r0 []question.Answerable
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]question.Answerable, error)); ok {
		return returnFunc(ctx, formID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []question.Answerable); ok {
		r0 = returnFunc(ctx, formID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]question.Answerable)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, formID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuestionStore_ListByFormID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByFormID'
type MockQuestionStore_ListByFormID_Call struct {
	*mock.Call
}

// ListByFormID is a helper method to define mock.On call
//   - ctx context.Context
//   - formID uuid.UUID
func (_e *MockQuestionStore_Expecter) ListByFormID(ctx interface{}, formID interface{}) *MockQuestionStore_ListByFormID_Call {
	return &MockQuestionStore_ListByFormID_Call{Call: _e.mock.On("ListByFormID", ctx, formID)}
}

func (_c *MockQuestionStore_ListByFormID_Call) Run(run func(ctx context.Context, formID uuid.UUID)) *MockQuestionStore_ListByFormID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuestionStore_ListByFormID_Call) Return(answerables []question.Answerable, err error) *MockQuestionStore_ListByFormID_Call {
	_c.Call.Return(answerables, err)
	return _c
}

func (_c *MockQuestionStore_ListByFormID_Call) RunAndReturn(run func(ctx context.Context, formID uuid.UUID) ([]question.Answerable, error)) *MockQuestionStore_ListByFormID_Call {
	_c.Call.Return(run)
	return _c
}
