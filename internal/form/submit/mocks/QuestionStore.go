// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	question "NYCU-SDC/core-system-backend/internal/form/question"
	context "context"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// QuestionStore is an autogenerated mock type for the QuestionStore type
type QuestionStore struct {
	mock.Mock
}

type QuestionStore_Expecter struct {
	mock *mock.Mock
}

func (_m *QuestionStore) EXPECT() *QuestionStore_Expecter {
	return &QuestionStore_Expecter{mock: &_m.Mock}
}

// ListByFormID provides a mock function with given fields: ctx, formID
func (_m *QuestionStore) ListByFormID(ctx context.Context, formID uuid.UUID) ([]question.Answerable, error) {
	ret := _m.Called(ctx, formID)

	if len(ret) == 0 {
		panic("no return value specified for ListByFormID")
	}

	var r0 []question.Answerable
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]question.Answerable, error)); ok {
		return rf(ctx, formID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []question.Answerable); ok {
		r0 = rf(ctx, formID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]question.Answerable)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, formID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QuestionStore_ListByFormID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByFormID'
type QuestionStore_ListByFormID_Call struct {
	*mock.Call
}

// ListByFormID is a helper method to define mock.On call
//   - ctx context.Context
//   - formID uuid.UUID
func (_e *QuestionStore_Expecter) ListByFormID(ctx interface{}, formID interface{}) *QuestionStore_ListByFormID_Call {
	return &QuestionStore_ListByFormID_Call{Call: _e.mock.On("ListByFormID", ctx, formID)}
}

func (_c *QuestionStore_ListByFormID_Call) Run(run func(ctx context.Context, formID uuid.UUID)) *QuestionStore_ListByFormID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *QuestionStore_ListByFormID_Call) Return(_a0 []question.Answerable, _a1 error) *QuestionStore_ListByFormID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QuestionStore_ListByFormID_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]question.Answerable, error)) *QuestionStore_ListByFormID_Call {
	_c.Call.Return(run)
	return _c
}

// NewQuestionStore creates a new instance of QuestionStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQuestionStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *QuestionStore {
	mock := &QuestionStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
