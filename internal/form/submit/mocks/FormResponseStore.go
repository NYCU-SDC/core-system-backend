// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	response "NYCU-SDC/core-system-backend/internal/form/response"
	context "context"

	mock "github.com/stretchr/testify/mock"

	shared "NYCU-SDC/core-system-backend/internal/form/shared"

	uuid "github.com/google/uuid"
)

// FormResponseStore is an autogenerated mock type for the FormResponseStore type
type FormResponseStore struct {
	mock.Mock
}

type FormResponseStore_Expecter struct {
	mock *mock.Mock
}

func (_m *FormResponseStore) EXPECT() *FormResponseStore_Expecter {
	return &FormResponseStore_Expecter{mock: &_m.Mock}
}

// CreateOrUpdate provides a mock function with given fields: ctx, formID, userID, answers, questionType
func (_m *FormResponseStore) CreateOrUpdate(ctx context.Context, formID uuid.UUID, userID uuid.UUID, answers []shared.AnswerParam, questionType []response.QuestionType) (response.FormResponse, error) {
	ret := _m.Called(ctx, formID, userID, answers, questionType)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdate")
	}

	var r0 response.FormResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, []shared.AnswerParam, []response.QuestionType) (response.FormResponse, error)); ok {
		return rf(ctx, formID, userID, answers, questionType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, []shared.AnswerParam, []response.QuestionType) response.FormResponse); ok {
		r0 = rf(ctx, formID, userID, answers, questionType)
	} else {
		r0 = ret.Get(0).(response.FormResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, []shared.AnswerParam, []response.QuestionType) error); ok {
		r1 = rf(ctx, formID, userID, answers, questionType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FormResponseStore_CreateOrUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdate'
type FormResponseStore_CreateOrUpdate_Call struct {
	*mock.Call
}

// CreateOrUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - formID uuid.UUID
//   - userID uuid.UUID
//   - answers []shared.AnswerParam
//   - questionType []response.QuestionType
func (_e *FormResponseStore_Expecter) CreateOrUpdate(ctx interface{}, formID interface{}, userID interface{}, answers interface{}, questionType interface{}) *FormResponseStore_CreateOrUpdate_Call {
	return &FormResponseStore_CreateOrUpdate_Call{Call: _e.mock.On("CreateOrUpdate", ctx, formID, userID, answers, questionType)}
}

func (_c *FormResponseStore_CreateOrUpdate_Call) Run(run func(ctx context.Context, formID uuid.UUID, userID uuid.UUID, answers []shared.AnswerParam, questionType []response.QuestionType)) *FormResponseStore_CreateOrUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].([]shared.AnswerParam), args[4].([]response.QuestionType))
	})
	return _c
}

func (_c *FormResponseStore_CreateOrUpdate_Call) Return(_a0 response.FormResponse, _a1 error) *FormResponseStore_CreateOrUpdate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FormResponseStore_CreateOrUpdate_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, []shared.AnswerParam, []response.QuestionType) (response.FormResponse, error)) *FormResponseStore_CreateOrUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// NewFormResponseStore creates a new instance of FormResponseStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFormResponseStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *FormResponseStore {
	mock := &FormResponseStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
