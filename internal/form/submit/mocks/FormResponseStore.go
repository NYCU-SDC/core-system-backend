// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"NYCU-SDC/core-system-backend/internal/form/response"
	"NYCU-SDC/core-system-backend/internal/form/shared"
	"context"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockFormResponseStore creates a new instance of MockFormResponseStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFormResponseStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFormResponseStore {
	mock := &MockFormResponseStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFormResponseStore is an autogenerated mock type for the FormResponseStore type
type MockFormResponseStore struct {
	mock.Mock
}

type MockFormResponseStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFormResponseStore) EXPECT() *MockFormResponseStore_Expecter {
	return &MockFormResponseStore_Expecter{mock: &_m.Mock}
}

// CreateOrUpdate provides a mock function for the type MockFormResponseStore
func (_mock *MockFormResponseStore) CreateOrUpdate(ctx context.Context, formID uuid.UUID, userID uuid.UUID, answers []shared.AnswerParam, questionType []response.QuestionType) (response.FormResponse, error) {
	ret := _mock.Called(ctx, formID, userID, answers, questionType)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdate")
	}

	var r0 response.FormResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, []shared.AnswerParam, []response.QuestionType) (response.FormResponse, error)); ok {
		return returnFunc(ctx, formID, userID, answers, questionType)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, []shared.AnswerParam, []response.QuestionType) response.FormResponse); ok {
		r0 = returnFunc(ctx, formID, userID, answers, questionType)
	} else {
		r0 = ret.Get(0).(response.FormResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, []shared.AnswerParam, []response.QuestionType) error); ok {
		r1 = returnFunc(ctx, formID, userID, answers, questionType)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFormResponseStore_CreateOrUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdate'
type MockFormResponseStore_CreateOrUpdate_Call struct {
	*mock.Call
}

// CreateOrUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - formID uuid.UUID
//   - userID uuid.UUID
//   - answers []shared.AnswerParam
//   - questionType []response.QuestionType
func (_e *MockFormResponseStore_Expecter) CreateOrUpdate(ctx interface{}, formID interface{}, userID interface{}, answers interface{}, questionType interface{}) *MockFormResponseStore_CreateOrUpdate_Call {
	return &MockFormResponseStore_CreateOrUpdate_Call{Call: _e.mock.On("CreateOrUpdate", ctx, formID, userID, answers, questionType)}
}

func (_c *MockFormResponseStore_CreateOrUpdate_Call) Run(run func(ctx context.Context, formID uuid.UUID, userID uuid.UUID, answers []shared.AnswerParam, questionType []response.QuestionType)) *MockFormResponseStore_CreateOrUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		var arg3 []shared.AnswerParam
		if args[3] != nil {
			arg3 = args[3].([]shared.AnswerParam)
		}
		var arg4 []response.QuestionType
		if args[4] != nil {
			arg4 = args[4].([]response.QuestionType)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockFormResponseStore_CreateOrUpdate_Call) Return(formResponse response.FormResponse, err error) *MockFormResponseStore_CreateOrUpdate_Call {
	_c.Call.Return(formResponse, err)
	return _c
}

func (_c *MockFormResponseStore_CreateOrUpdate_Call) RunAndReturn(run func(ctx context.Context, formID uuid.UUID, userID uuid.UUID, answers []shared.AnswerParam, questionType []response.QuestionType) (response.FormResponse, error)) *MockFormResponseStore_CreateOrUpdate_Call {
	_c.Call.Return(run)
	return _c
}
