// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package form

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const create = `-- name: Create :one
INSERT INTO forms (title, description, unit_id, last_editor, deadline)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, title, description, status, unit_id, last_editor, deadline, created_at, updated_at
`

type CreateParams struct {
	Title       string
	Description pgtype.Text
	UnitID      pgtype.UUID
	LastEditor  uuid.UUID
	Deadline    pgtype.Timestamptz
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (Form, error) {
	row := q.db.QueryRow(ctx, create,
		arg.Title,
		arg.Description,
		arg.UnitID,
		arg.LastEditor,
		arg.Deadline,
	)
	var i Form
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.UnitID,
		&i.LastEditor,
		&i.Deadline,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const delete = `-- name: Delete :exec
DELETE FROM forms WHERE id = $1
`

func (q *Queries) Delete(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, delete, id)
	return err
}

const getByID = `-- name: GetByID :one
SELECT id, title, description, status, unit_id, last_editor, deadline, created_at, updated_at FROM forms WHERE id = $1
`

func (q *Queries) GetByID(ctx context.Context, id uuid.UUID) (Form, error) {
	row := q.db.QueryRow(ctx, getByID, id)
	var i Form
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.UnitID,
		&i.LastEditor,
		&i.Deadline,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const list = `-- name: List :many
SELECT id, title, description, status, unit_id, last_editor, deadline, created_at, updated_at FROM forms ORDER BY updated_at DESC
`

func (q *Queries) List(ctx context.Context) ([]Form, error) {
	rows, err := q.db.Query(ctx, list)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Form
	for rows.Next() {
		var i Form
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.UnitID,
			&i.LastEditor,
			&i.Deadline,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listByUnit = `-- name: ListByUnit :many
SELECT id, title, description, status, unit_id, last_editor, deadline, created_at, updated_at FROM forms
WHERE unit_id = $1
ORDER BY updated_at DESC
`

func (q *Queries) ListByUnit(ctx context.Context, unitID pgtype.UUID) ([]Form, error) {
	rows, err := q.db.Query(ctx, listByUnit, unitID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Form
	for rows.Next() {
		var i Form
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.UnitID,
			&i.LastEditor,
			&i.Deadline,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setStatus = `-- name: SetStatus :one
UPDATE forms
SET status = $2, last_editor = $3, updated_at = now()
WHERE id = $1
RETURNING id, title, description, status, unit_id, last_editor, deadline, created_at, updated_at
`

type SetStatusParams struct {
	ID         uuid.UUID
	Status     Status
	LastEditor uuid.UUID
}

func (q *Queries) SetStatus(ctx context.Context, arg SetStatusParams) (Form, error) {
	row := q.db.QueryRow(ctx, setStatus, arg.ID, arg.Status, arg.LastEditor)
	var i Form
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.UnitID,
		&i.LastEditor,
		&i.Deadline,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const update = `-- name: Update :one
UPDATE forms
SET title = $2, description = $3, last_editor = $4, deadline = $5, updated_at = now()
WHERE id = $1
RETURNING id, title, description, status, unit_id, last_editor, deadline, created_at, updated_at
`

type UpdateParams struct {
	ID          uuid.UUID
	Title       string
	Description pgtype.Text
	LastEditor  uuid.UUID
	Deadline    pgtype.Timestamptz
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) (Form, error) {
	row := q.db.QueryRow(ctx, update,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.LastEditor,
		arg.Deadline,
	)
	var i Form
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.UnitID,
		&i.LastEditor,
		&i.Deadline,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
