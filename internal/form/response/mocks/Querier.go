// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	response "NYCU-SDC/core-system-backend/internal/form/response"
	context "context"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Querier is an autogenerated mock type for the Querier type
type Querier struct {
	mock.Mock
}

type Querier_Expecter struct {
	mock *mock.Mock
}

func (_m *Querier) EXPECT() *Querier_Expecter {
	return &Querier_Expecter{mock: &_m.Mock}
}

// AnswerExists provides a mock function with given fields: ctx, arg
func (_m *Querier) AnswerExists(ctx context.Context, arg response.AnswerExistsParams) (bool, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for AnswerExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, response.AnswerExistsParams) (bool, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, response.AnswerExistsParams) bool); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, response.AnswerExistsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_AnswerExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AnswerExists'
type Querier_AnswerExists_Call struct {
	*mock.Call
}

// AnswerExists is a helper method to define mock.On call
//   - ctx context.Context
//   - arg response.AnswerExistsParams
func (_e *Querier_Expecter) AnswerExists(ctx interface{}, arg interface{}) *Querier_AnswerExists_Call {
	return &Querier_AnswerExists_Call{Call: _e.mock.On("AnswerExists", ctx, arg)}
}

func (_c *Querier_AnswerExists_Call) Run(run func(ctx context.Context, arg response.AnswerExistsParams)) *Querier_AnswerExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(response.AnswerExistsParams))
	})
	return _c
}

func (_c *Querier_AnswerExists_Call) Return(_a0 bool, _a1 error) *Querier_AnswerExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_AnswerExists_Call) RunAndReturn(run func(context.Context, response.AnswerExistsParams) (bool, error)) *Querier_AnswerExists_Call {
	_c.Call.Return(run)
	return _c
}

// CheckAnswerContent provides a mock function with given fields: ctx, arg
func (_m *Querier) CheckAnswerContent(ctx context.Context, arg response.CheckAnswerContentParams) (bool, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CheckAnswerContent")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, response.CheckAnswerContentParams) (bool, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, response.CheckAnswerContentParams) bool); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, response.CheckAnswerContentParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_CheckAnswerContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckAnswerContent'
type Querier_CheckAnswerContent_Call struct {
	*mock.Call
}

// CheckAnswerContent is a helper method to define mock.On call
//   - ctx context.Context
//   - arg response.CheckAnswerContentParams
func (_e *Querier_Expecter) CheckAnswerContent(ctx interface{}, arg interface{}) *Querier_CheckAnswerContent_Call {
	return &Querier_CheckAnswerContent_Call{Call: _e.mock.On("CheckAnswerContent", ctx, arg)}
}

func (_c *Querier_CheckAnswerContent_Call) Run(run func(ctx context.Context, arg response.CheckAnswerContentParams)) *Querier_CheckAnswerContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(response.CheckAnswerContentParams))
	})
	return _c
}

func (_c *Querier_CheckAnswerContent_Call) Return(_a0 bool, _a1 error) *Querier_CheckAnswerContent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_CheckAnswerContent_Call) RunAndReturn(run func(context.Context, response.CheckAnswerContentParams) (bool, error)) *Querier_CheckAnswerContent_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, arg
func (_m *Querier) Create(ctx context.Context, arg response.CreateParams) (response.FormResponse, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 response.FormResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, response.CreateParams) (response.FormResponse, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, response.CreateParams) response.FormResponse); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(response.FormResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, response.CreateParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Querier_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - arg response.CreateParams
func (_e *Querier_Expecter) Create(ctx interface{}, arg interface{}) *Querier_Create_Call {
	return &Querier_Create_Call{Call: _e.mock.On("Create", ctx, arg)}
}

func (_c *Querier_Create_Call) Run(run func(ctx context.Context, arg response.CreateParams)) *Querier_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(response.CreateParams))
	})
	return _c
}

func (_c *Querier_Create_Call) Return(_a0 response.FormResponse, _a1 error) *Querier_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_Create_Call) RunAndReturn(run func(context.Context, response.CreateParams) (response.FormResponse, error)) *Querier_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAnswer provides a mock function with given fields: ctx, arg
func (_m *Querier) CreateAnswer(ctx context.Context, arg response.CreateAnswerParams) (response.Answer, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateAnswer")
	}

	var r0 response.Answer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, response.CreateAnswerParams) (response.Answer, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, response.CreateAnswerParams) response.Answer); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(response.Answer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, response.CreateAnswerParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_CreateAnswer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAnswer'
type Querier_CreateAnswer_Call struct {
	*mock.Call
}

// CreateAnswer is a helper method to define mock.On call
//   - ctx context.Context
//   - arg response.CreateAnswerParams
func (_e *Querier_Expecter) CreateAnswer(ctx interface{}, arg interface{}) *Querier_CreateAnswer_Call {
	return &Querier_CreateAnswer_Call{Call: _e.mock.On("CreateAnswer", ctx, arg)}
}

func (_c *Querier_CreateAnswer_Call) Run(run func(ctx context.Context, arg response.CreateAnswerParams)) *Querier_CreateAnswer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(response.CreateAnswerParams))
	})
	return _c
}

func (_c *Querier_CreateAnswer_Call) Return(_a0 response.Answer, _a1 error) *Querier_CreateAnswer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_CreateAnswer_Call) RunAndReturn(run func(context.Context, response.CreateAnswerParams) (response.Answer, error)) *Querier_CreateAnswer_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *Querier) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Querier_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Querier_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *Querier_Expecter) Delete(ctx interface{}, id interface{}) *Querier_Delete_Call {
	return &Querier_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *Querier_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *Querier_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Querier_Delete_Call) Return(_a0 error) *Querier_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Querier_Delete_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *Querier_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function with given fields: ctx, arg
func (_m *Querier) Exists(ctx context.Context, arg response.ExistsParams) (bool, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, response.ExistsParams) (bool, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, response.ExistsParams) bool); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, response.ExistsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type Querier_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - arg response.ExistsParams
func (_e *Querier_Expecter) Exists(ctx interface{}, arg interface{}) *Querier_Exists_Call {
	return &Querier_Exists_Call{Call: _e.mock.On("Exists", ctx, arg)}
}

func (_c *Querier_Exists_Call) Run(run func(ctx context.Context, arg response.ExistsParams)) *Querier_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(response.ExistsParams))
	})
	return _c
}

func (_c *Querier_Exists_Call) Return(_a0 bool, _a1 error) *Querier_Exists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_Exists_Call) RunAndReturn(run func(context.Context, response.ExistsParams) (bool, error)) *Querier_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, arg
func (_m *Querier) Get(ctx context.Context, arg response.GetParams) (response.FormResponse, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 response.FormResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, response.GetParams) (response.FormResponse, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, response.GetParams) response.FormResponse); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(response.FormResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, response.GetParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Querier_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - arg response.GetParams
func (_e *Querier_Expecter) Get(ctx interface{}, arg interface{}) *Querier_Get_Call {
	return &Querier_Get_Call{Call: _e.mock.On("Get", ctx, arg)}
}

func (_c *Querier_Get_Call) Run(run func(ctx context.Context, arg response.GetParams)) *Querier_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(response.GetParams))
	})
	return _c
}

func (_c *Querier_Get_Call) Return(_a0 response.FormResponse, _a1 error) *Querier_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_Get_Call) RunAndReturn(run func(context.Context, response.GetParams) (response.FormResponse, error)) *Querier_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAnswerID provides a mock function with given fields: ctx, arg
func (_m *Querier) GetAnswerID(ctx context.Context, arg response.GetAnswerIDParams) (uuid.UUID, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetAnswerID")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, response.GetAnswerIDParams) (uuid.UUID, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, response.GetAnswerIDParams) uuid.UUID); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, response.GetAnswerIDParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetAnswerID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAnswerID'
type Querier_GetAnswerID_Call struct {
	*mock.Call
}

// GetAnswerID is a helper method to define mock.On call
//   - ctx context.Context
//   - arg response.GetAnswerIDParams
func (_e *Querier_Expecter) GetAnswerID(ctx interface{}, arg interface{}) *Querier_GetAnswerID_Call {
	return &Querier_GetAnswerID_Call{Call: _e.mock.On("GetAnswerID", ctx, arg)}
}

func (_c *Querier_GetAnswerID_Call) Run(run func(ctx context.Context, arg response.GetAnswerIDParams)) *Querier_GetAnswerID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(response.GetAnswerIDParams))
	})
	return _c
}

func (_c *Querier_GetAnswerID_Call) Return(_a0 uuid.UUID, _a1 error) *Querier_GetAnswerID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetAnswerID_Call) RunAndReturn(run func(context.Context, response.GetAnswerIDParams) (uuid.UUID, error)) *Querier_GetAnswerID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAnswersByQuestionID provides a mock function with given fields: ctx, arg
func (_m *Querier) GetAnswersByQuestionID(ctx context.Context, arg response.GetAnswersByQuestionIDParams) ([]response.GetAnswersByQuestionIDRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetAnswersByQuestionID")
	}

	var r0 []response.GetAnswersByQuestionIDRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, response.GetAnswersByQuestionIDParams) ([]response.GetAnswersByQuestionIDRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, response.GetAnswersByQuestionIDParams) []response.GetAnswersByQuestionIDRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]response.GetAnswersByQuestionIDRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, response.GetAnswersByQuestionIDParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetAnswersByQuestionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAnswersByQuestionID'
type Querier_GetAnswersByQuestionID_Call struct {
	*mock.Call
}

// GetAnswersByQuestionID is a helper method to define mock.On call
//   - ctx context.Context
//   - arg response.GetAnswersByQuestionIDParams
func (_e *Querier_Expecter) GetAnswersByQuestionID(ctx interface{}, arg interface{}) *Querier_GetAnswersByQuestionID_Call {
	return &Querier_GetAnswersByQuestionID_Call{Call: _e.mock.On("GetAnswersByQuestionID", ctx, arg)}
}

func (_c *Querier_GetAnswersByQuestionID_Call) Run(run func(ctx context.Context, arg response.GetAnswersByQuestionIDParams)) *Querier_GetAnswersByQuestionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(response.GetAnswersByQuestionIDParams))
	})
	return _c
}

func (_c *Querier_GetAnswersByQuestionID_Call) Return(_a0 []response.GetAnswersByQuestionIDRow, _a1 error) *Querier_GetAnswersByQuestionID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetAnswersByQuestionID_Call) RunAndReturn(run func(context.Context, response.GetAnswersByQuestionIDParams) ([]response.GetAnswersByQuestionIDRow, error)) *Querier_GetAnswersByQuestionID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAnswersByResponseID provides a mock function with given fields: ctx, responseID
func (_m *Querier) GetAnswersByResponseID(ctx context.Context, responseID uuid.UUID) ([]response.Answer, error) {
	ret := _m.Called(ctx, responseID)

	if len(ret) == 0 {
		panic("no return value specified for GetAnswersByResponseID")
	}

	var r0 []response.Answer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]response.Answer, error)); ok {
		return rf(ctx, responseID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []response.Answer); ok {
		r0 = rf(ctx, responseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]response.Answer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, responseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetAnswersByResponseID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAnswersByResponseID'
type Querier_GetAnswersByResponseID_Call struct {
	*mock.Call
}

// GetAnswersByResponseID is a helper method to define mock.On call
//   - ctx context.Context
//   - responseID uuid.UUID
func (_e *Querier_Expecter) GetAnswersByResponseID(ctx interface{}, responseID interface{}) *Querier_GetAnswersByResponseID_Call {
	return &Querier_GetAnswersByResponseID_Call{Call: _e.mock.On("GetAnswersByResponseID", ctx, responseID)}
}

func (_c *Querier_GetAnswersByResponseID_Call) Run(run func(ctx context.Context, responseID uuid.UUID)) *Querier_GetAnswersByResponseID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Querier_GetAnswersByResponseID_Call) Return(_a0 []response.Answer, _a1 error) *Querier_GetAnswersByResponseID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetAnswersByResponseID_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]response.Answer, error)) *Querier_GetAnswersByResponseID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByFormIDAndSubmittedBy provides a mock function with given fields: ctx, arg
func (_m *Querier) GetByFormIDAndSubmittedBy(ctx context.Context, arg response.GetByFormIDAndSubmittedByParams) (response.FormResponse, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetByFormIDAndSubmittedBy")
	}

	var r0 response.FormResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, response.GetByFormIDAndSubmittedByParams) (response.FormResponse, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, response.GetByFormIDAndSubmittedByParams) response.FormResponse); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(response.FormResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, response.GetByFormIDAndSubmittedByParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetByFormIDAndSubmittedBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByFormIDAndSubmittedBy'
type Querier_GetByFormIDAndSubmittedBy_Call struct {
	*mock.Call
}

// GetByFormIDAndSubmittedBy is a helper method to define mock.On call
//   - ctx context.Context
//   - arg response.GetByFormIDAndSubmittedByParams
func (_e *Querier_Expecter) GetByFormIDAndSubmittedBy(ctx interface{}, arg interface{}) *Querier_GetByFormIDAndSubmittedBy_Call {
	return &Querier_GetByFormIDAndSubmittedBy_Call{Call: _e.mock.On("GetByFormIDAndSubmittedBy", ctx, arg)}
}

func (_c *Querier_GetByFormIDAndSubmittedBy_Call) Run(run func(ctx context.Context, arg response.GetByFormIDAndSubmittedByParams)) *Querier_GetByFormIDAndSubmittedBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(response.GetByFormIDAndSubmittedByParams))
	})
	return _c
}

func (_c *Querier_GetByFormIDAndSubmittedBy_Call) Return(_a0 response.FormResponse, _a1 error) *Querier_GetByFormIDAndSubmittedBy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetByFormIDAndSubmittedBy_Call) RunAndReturn(run func(context.Context, response.GetByFormIDAndSubmittedByParams) (response.FormResponse, error)) *Querier_GetByFormIDAndSubmittedBy_Call {
	_c.Call.Return(run)
	return _c
}

// ListByFormID provides a mock function with given fields: ctx, formID
func (_m *Querier) ListByFormID(ctx context.Context, formID uuid.UUID) ([]response.FormResponse, error) {
	ret := _m.Called(ctx, formID)

	if len(ret) == 0 {
		panic("no return value specified for ListByFormID")
	}

	var r0 []response.FormResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]response.FormResponse, error)); ok {
		return rf(ctx, formID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []response.FormResponse); ok {
		r0 = rf(ctx, formID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]response.FormResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, formID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_ListByFormID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByFormID'
type Querier_ListByFormID_Call struct {
	*mock.Call
}

// ListByFormID is a helper method to define mock.On call
//   - ctx context.Context
//   - formID uuid.UUID
func (_e *Querier_Expecter) ListByFormID(ctx interface{}, formID interface{}) *Querier_ListByFormID_Call {
	return &Querier_ListByFormID_Call{Call: _e.mock.On("ListByFormID", ctx, formID)}
}

func (_c *Querier_ListByFormID_Call) Run(run func(ctx context.Context, formID uuid.UUID)) *Querier_ListByFormID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Querier_ListByFormID_Call) Return(_a0 []response.FormResponse, _a1 error) *Querier_ListByFormID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_ListByFormID_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]response.FormResponse, error)) *Querier_ListByFormID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, id
func (_m *Querier) Update(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Querier_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Querier_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *Querier_Expecter) Update(ctx interface{}, id interface{}) *Querier_Update_Call {
	return &Querier_Update_Call{Call: _e.mock.On("Update", ctx, id)}
}

func (_c *Querier_Update_Call) Run(run func(ctx context.Context, id uuid.UUID)) *Querier_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Querier_Update_Call) Return(_a0 error) *Querier_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Querier_Update_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *Querier_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAnswer provides a mock function with given fields: ctx, arg
func (_m *Querier) UpdateAnswer(ctx context.Context, arg response.UpdateAnswerParams) (response.Answer, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAnswer")
	}

	var r0 response.Answer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, response.UpdateAnswerParams) (response.Answer, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, response.UpdateAnswerParams) response.Answer); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(response.Answer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, response.UpdateAnswerParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_UpdateAnswer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAnswer'
type Querier_UpdateAnswer_Call struct {
	*mock.Call
}

// UpdateAnswer is a helper method to define mock.On call
//   - ctx context.Context
//   - arg response.UpdateAnswerParams
func (_e *Querier_Expecter) UpdateAnswer(ctx interface{}, arg interface{}) *Querier_UpdateAnswer_Call {
	return &Querier_UpdateAnswer_Call{Call: _e.mock.On("UpdateAnswer", ctx, arg)}
}

func (_c *Querier_UpdateAnswer_Call) Run(run func(ctx context.Context, arg response.UpdateAnswerParams)) *Querier_UpdateAnswer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(response.UpdateAnswerParams))
	})
	return _c
}

func (_c *Querier_UpdateAnswer_Call) Return(_a0 response.Answer, _a1 error) *Querier_UpdateAnswer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_UpdateAnswer_Call) RunAndReturn(run func(context.Context, response.UpdateAnswerParams) (response.Answer, error)) *Querier_UpdateAnswer_Call {
	_c.Call.Return(run)
	return _c
}

// NewQuerier creates a new instance of Querier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *Querier {
	mock := &Querier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
