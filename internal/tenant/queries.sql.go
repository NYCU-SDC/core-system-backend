// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package tenant

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const create = `-- name: Create :one
INSERT INTO tenants (id, slug, db_strategy, owner_id)
VALUES ($1, $2, $3, $4)
RETURNING id, slug, db_strategy, owner_id
`

type CreateParams struct {
	ID         uuid.UUID
	Slug       string
	DbStrategy DbStrategy
	OwnerID    pgtype.UUID
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (Tenant, error) {
	row := q.db.QueryRow(ctx, create,
		arg.ID,
		arg.Slug,
		arg.DbStrategy,
		arg.OwnerID,
	)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.DbStrategy,
		&i.OwnerID,
	)
	return i, err
}

const createSlugHistory = `-- name: CreateSlugHistory :one
INSERT INTO slug_history (slug, org_id, orgName, created_at, ended_at)
VALUES ($1, $2, $3, $4, $5)
RETURNING slug, org_id, orgname, created_at, ended_at
`

type CreateSlugHistoryParams struct {
	Slug      string
	OrgID     pgtype.UUID
	Orgname   pgtype.Text
	CreatedAt pgtype.Timestamptz
	EndedAt   pgtype.Timestamptz
}

func (q *Queries) CreateSlugHistory(ctx context.Context, arg CreateSlugHistoryParams) (SlugHistory, error) {
	row := q.db.QueryRow(ctx, createSlugHistory,
		arg.Slug,
		arg.OrgID,
		arg.Orgname,
		arg.CreatedAt,
		arg.EndedAt,
	)
	var i SlugHistory
	err := row.Scan(
		&i.Slug,
		&i.OrgID,
		&i.Orgname,
		&i.CreatedAt,
		&i.EndedAt,
	)
	return i, err
}

const delete = `-- name: Delete :exec
DELETE FROM tenants
WHERE id = $1
`

func (q *Queries) Delete(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, delete, id)
	return err
}

const existsBySlug = `-- name: ExistsBySlug :one
SELECT EXISTS(SELECT 1 FROM tenants WHERE slug = $1)
`

func (q *Queries) ExistsBySlug(ctx context.Context, slug string) (bool, error) {
	row := q.db.QueryRow(ctx, existsBySlug, slug)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const get = `-- name: Get :one
SELECT id, slug, db_strategy, owner_id FROM tenants WHERE id = $1
`

func (q *Queries) Get(ctx context.Context, id uuid.UUID) (Tenant, error) {
	row := q.db.QueryRow(ctx, get, id)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.DbStrategy,
		&i.OwnerID,
	)
	return i, err
}

const getBySlug = `-- name: GetBySlug :one
SELECT id, slug, db_strategy, owner_id FROM tenants WHERE slug = $1
`

func (q *Queries) GetBySlug(ctx context.Context, slug string) (Tenant, error) {
	row := q.db.QueryRow(ctx, getBySlug, slug)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.DbStrategy,
		&i.OwnerID,
	)
	return i, err
}

const getSlugHistory = `-- name: GetSlugHistory :many
SELECT slug, org_id, orgname, created_at, ended_at FROM slug_history WHERE slug = $1
`

func (q *Queries) GetSlugHistory(ctx context.Context, slug string) ([]SlugHistory, error) {
	rows, err := q.db.Query(ctx, getSlugHistory, slug)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SlugHistory
	for rows.Next() {
		var i SlugHistory
		if err := rows.Scan(
			&i.Slug,
			&i.OrgID,
			&i.Orgname,
			&i.CreatedAt,
			&i.EndedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const update = `-- name: Update :one
UPDATE tenants
SET slug = $2, db_strategy = $3
WHERE id = $1
RETURNING id, slug, db_strategy, owner_id
`

type UpdateParams struct {
	ID         uuid.UUID
	Slug       string
	DbStrategy DbStrategy
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) (Tenant, error) {
	row := q.db.QueryRow(ctx, update, arg.ID, arg.Slug, arg.DbStrategy)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.DbStrategy,
		&i.OwnerID,
	)
	return i, err
}

const updateSlugHistory = `-- name: UpdateSlugHistory :one
UPDATE slug_history
SET ended_at = $3
WHERE slug = $1 AND org_id = $2
RETURNING slug, org_id, orgname, created_at, ended_at
`

type UpdateSlugHistoryParams struct {
	Slug    string
	OrgID   pgtype.UUID
	EndedAt pgtype.Timestamptz
}

func (q *Queries) UpdateSlugHistory(ctx context.Context, arg UpdateSlugHistoryParams) (SlugHistory, error) {
	row := q.db.QueryRow(ctx, updateSlugHistory, arg.Slug, arg.OrgID, arg.EndedAt)
	var i SlugHistory
	err := row.Scan(
		&i.Slug,
		&i.OrgID,
		&i.Orgname,
		&i.CreatedAt,
		&i.EndedAt,
	)
	return i, err
}
