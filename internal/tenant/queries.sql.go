// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package tenant

import (
	"context"

	"github.com/google/uuid"
)

const create = `-- name: Create :one
INSERT INTO tenants (id, db_strategy)
VALUES ($1, $2)
RETURNING id, db_strategy
`

type CreateParams struct {
	ID         uuid.UUID
	DbStrategy DbStrategy
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (Tenant, error) {
	row := q.db.QueryRow(ctx, create, arg.ID, arg.DbStrategy)
	var i Tenant
	err := row.Scan(&i.ID, &i.DbStrategy)
	return i, err
}

const delete = `-- name: Delete :exec
DELETE FROM tenants
WHERE id = $1
`

func (q *Queries) Delete(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, delete, id)
	return err
}

const get = `-- name: Get :one
SELECT id, db_strategy FROM tenants WHERE id = $1
`

func (q *Queries) Get(ctx context.Context, id uuid.UUID) (Tenant, error) {
	row := q.db.QueryRow(ctx, get, id)
	var i Tenant
	err := row.Scan(&i.ID, &i.DbStrategy)
	return i, err
}

const update = `-- name: Update :one
UPDATE tenants
SET db_strategy = $2
WHERE id = $1
RETURNING id, db_strategy
`

type UpdateParams struct {
	ID         uuid.UUID
	DbStrategy DbStrategy
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) (Tenant, error) {
	row := q.db.QueryRow(ctx, update, arg.ID, arg.DbStrategy)
	var i Tenant
	err := row.Scan(&i.ID, &i.DbStrategy)
	return i, err
}
