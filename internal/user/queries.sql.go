// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package user

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const create = `-- name: Create :one
INSERT INTO users (name, username, avatar_url, role, email)
VALUES ($1, $2, $3, $4, $5) 
RETURNING id, name, username, email, avatar_url, role, created_at, updated_at
`

type CreateParams struct {
	Name      pgtype.Text
	Username  pgtype.Text
	AvatarUrl pgtype.Text
	Role      []string
	Email     []string
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (User, error) {
	row := q.db.QueryRow(ctx, create,
		arg.Name,
		arg.Username,
		arg.AvatarUrl,
		arg.Role,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.AvatarUrl,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createAuth = `-- name: CreateAuth :one
INSERT INTO auth (user_id, provider, provider_id)
VALUES ($1, $2, $3)
RETURNING id, user_id, provider, provider_id, created_at, updated_at
`

type CreateAuthParams struct {
	UserID     uuid.UUID
	Provider   string
	ProviderID string
}

func (q *Queries) CreateAuth(ctx context.Context, arg CreateAuthParams) (Auth, error) {
	row := q.db.QueryRow(ctx, createAuth, arg.UserID, arg.Provider, arg.ProviderID)
	var i Auth
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Provider,
		&i.ProviderID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const existsByID = `-- name: ExistsByID :one
SELECT EXISTS(SELECT 1 FROM users WHERE id = $1)
`

func (q *Queries) ExistsByID(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, existsByID, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getByID = `-- name: GetByID :one
SELECT id, name, username, email, avatar_url, role, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) GetByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.AvatarUrl,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserIDByAuth = `-- name: GetUserIDByAuth :one
SELECT user_id FROM auth WHERE provider = $1 AND provider_id = $2
`

type GetUserIDByAuthParams struct {
	Provider   string
	ProviderID string
}

func (q *Queries) GetUserIDByAuth(ctx context.Context, arg GetUserIDByAuthParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, getUserIDByAuth, arg.Provider, arg.ProviderID)
	var user_id uuid.UUID
	err := row.Scan(&user_id)
	return user_id, err
}

const update = `-- name: Update :one
UPDATE users
SET name = $2, username = $3, avatar_url = $4, 
    email = CASE
      WHEN COALESCE(cardinality($5::varchar[]), 0) > 0 THEN
        array_remove($5::varchar[], '')
      ELSE email
    END,
    updated_at = now()
WHERE id = $1
RETURNING id, name, username, email, avatar_url, role, created_at, updated_at
`

type UpdateParams struct {
	ID        uuid.UUID
	Name      pgtype.Text
	Username  pgtype.Text
	AvatarUrl pgtype.Text
	Email     []string
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) (User, error) {
	row := q.db.QueryRow(ctx, update,
		arg.ID,
		arg.Name,
		arg.Username,
		arg.AvatarUrl,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.AvatarUrl,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const userExistsByAuth = `-- name: UserExistsByAuth :one
SELECT EXISTS(SELECT 1 FROM auth WHERE provider = $1 AND provider_id = $2)
`

type UserExistsByAuthParams struct {
	Provider   string
	ProviderID string
}

func (q *Queries) UserExistsByAuth(ctx context.Context, arg UserExistsByAuthParams) (bool, error) {
	row := q.db.QueryRow(ctx, userExistsByAuth, arg.Provider, arg.ProviderID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
