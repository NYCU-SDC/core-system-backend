// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package user

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createAuth = `-- name: CreateAuth :one
INSERT INTO auth (user_id, provider, provider_id)
VALUES ($1, $2, $3)
RETURNING id, user_id, provider, provider_id, created_at, updated_at
`

type CreateAuthParams struct {
	UserID     uuid.UUID
	Provider   string
	ProviderID string
}

func (q *Queries) CreateAuth(ctx context.Context, arg CreateAuthParams) (Auth, error) {
	row := q.db.QueryRow(ctx, createAuth, arg.UserID, arg.Provider, arg.ProviderID)
	var i Auth
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Provider,
		&i.ProviderID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, username, avatar_url, role)
VALUES ($1, $2, $3, $4) 
RETURNING id, name, username, avatar_url, role, created_at, updated_at
`

type CreateUserParams struct {
	Name      pgtype.Text
	Username  pgtype.Text
	AvatarUrl pgtype.Text
	Role      []string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.Username,
		arg.AvatarUrl,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.AvatarUrl,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAuthByUserID = `-- name: DeleteAuthByUserID :exec
DELETE FROM auth WHERE user_id = $1
`

func (q *Queries) DeleteAuthByUserID(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAuthByUserID, userID)
	return err
}

const deleteAuthByUserIDAndProvider = `-- name: DeleteAuthByUserIDAndProvider :exec
DELETE FROM auth WHERE user_id = $1 AND provider = $2
`

type DeleteAuthByUserIDAndProviderParams struct {
	UserID   uuid.UUID
	Provider string
}

func (q *Queries) DeleteAuthByUserIDAndProvider(ctx context.Context, arg DeleteAuthByUserIDAndProviderParams) error {
	_, err := q.db.Exec(ctx, deleteAuthByUserIDAndProvider, arg.UserID, arg.Provider)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getAuthByProviderAndProviderID = `-- name: GetAuthByProviderAndProviderID :one
SELECT id, user_id, provider, provider_id, created_at, updated_at FROM auth WHERE provider = $1 AND provider_id = $2
`

type GetAuthByProviderAndProviderIDParams struct {
	Provider   string
	ProviderID string
}

func (q *Queries) GetAuthByProviderAndProviderID(ctx context.Context, arg GetAuthByProviderAndProviderIDParams) (Auth, error) {
	row := q.db.QueryRow(ctx, getAuthByProviderAndProviderID, arg.Provider, arg.ProviderID)
	var i Auth
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Provider,
		&i.ProviderID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAuthByUserID = `-- name: GetAuthByUserID :many
SELECT id, user_id, provider, provider_id, created_at, updated_at FROM auth WHERE user_id = $1
`

func (q *Queries) GetAuthByUserID(ctx context.Context, userID uuid.UUID) ([]Auth, error) {
	rows, err := q.db.Query(ctx, getAuthByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Auth
	for rows.Next() {
		var i Auth
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Provider,
			&i.ProviderID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuthByUserIDAndProvider = `-- name: GetAuthByUserIDAndProvider :one
SELECT id, user_id, provider, provider_id, created_at, updated_at FROM auth WHERE user_id = $1 AND provider = $2
`

type GetAuthByUserIDAndProviderParams struct {
	UserID   uuid.UUID
	Provider string
}

func (q *Queries) GetAuthByUserIDAndProvider(ctx context.Context, arg GetAuthByUserIDAndProviderParams) (Auth, error) {
	row := q.db.QueryRow(ctx, getAuthByUserIDAndProvider, arg.UserID, arg.Provider)
	var i Auth
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Provider,
		&i.ProviderID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByAuth = `-- name: GetUserByAuth :one
SELECT u.id, u.name, u.username, u.avatar_url, u.role, u.created_at, u.updated_at 
FROM users u
INNER JOIN auth a ON u.id = a.user_id
WHERE a.provider = $1 AND a.provider_id = $2
LIMIT 1
`

type GetUserByAuthParams struct {
	Provider   string
	ProviderID string
}

func (q *Queries) GetUserByAuth(ctx context.Context, arg GetUserByAuthParams) (User, error) {
	row := q.db.QueryRow(ctx, getUserByAuth, arg.Provider, arg.ProviderID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.AvatarUrl,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, username, avatar_url, role, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.AvatarUrl,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET 
  name = $2,
  username = $3,
  avatar_url = $4,
  role = $5,
  updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, name, username, avatar_url, role, created_at, updated_at
`

type UpdateUserParams struct {
	ID        uuid.UUID
	Name      pgtype.Text
	Username  pgtype.Text
	AvatarUrl pgtype.Text
	Role      []string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Username,
		arg.AvatarUrl,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.AvatarUrl,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
