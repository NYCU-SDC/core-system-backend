// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package jwt

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type DbStrategy string

const (
	DbStrategyShared   DbStrategy = "shared"
	DbStrategyIsolated DbStrategy = "isolated"
)

func (e *DbStrategy) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DbStrategy(s)
	case string:
		*e = DbStrategy(s)
	default:
		return fmt.Errorf("unsupported scan type for DbStrategy: %T", src)
	}
	return nil
}

type NullDbStrategy struct {
	DbStrategy DbStrategy
	Valid      bool // Valid is true if DbStrategy is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDbStrategy) Scan(value interface{}) error {
	if value == nil {
		ns.DbStrategy, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DbStrategy.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDbStrategy) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DbStrategy), nil
}

type Auth struct {
	ID         uuid.UUID
	UserID     uuid.UUID
	Provider   string
	ProviderID string
	CreatedAt  pgtype.Timestamptz
	UpdatedAt  pgtype.Timestamptz
}

type OrgMember struct {
	OrgID    uuid.UUID
	MemberID uuid.UUID
}

type Organization struct {
	ID          uuid.UUID
	OwnerID     uuid.UUID
	Name        pgtype.Text
	Description pgtype.Text
	Metadata    []byte
	Slug        string
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
}

type ParentChild struct {
	ParentID pgtype.UUID
	ChildID  uuid.UUID
	OrgID    uuid.UUID
}

type RefreshToken struct {
	ID             uuid.UUID
	UserID         uuid.UUID
	IsActive       pgtype.Bool
	ExpirationDate pgtype.Timestamptz
}

type Tenant struct {
	ID         uuid.UUID
	DbStrategy DbStrategy
}

type Unit struct {
	ID          uuid.UUID
	OrgID       uuid.UUID
	Name        pgtype.Text
	Description pgtype.Text
	Metadata    []byte
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
}

type UnitMember struct {
	UnitID   uuid.UUID
	MemberID uuid.UUID
}

type User struct {
	ID        uuid.UUID
	Name      pgtype.Text
	Username  pgtype.Text
	AvatarUrl pgtype.Text
	Role      []string
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}
