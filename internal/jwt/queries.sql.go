// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package jwt

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const create = `-- name: Create :one
INSERT INTO refresh_tokens (user_id, expiration_date) VALUES ($1, $2) RETURNING id, user_id, is_active, expiration_date
`

type CreateParams struct {
	UserID         uuid.UUID
	ExpirationDate pgtype.Timestamptz
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, create, arg.UserID, arg.ExpirationDate)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IsActive,
		&i.ExpirationDate,
	)
	return i, err
}

const deleteExpired = `-- name: DeleteExpired :execrows
DELETE FROM refresh_tokens WHERE expiration_date < NOW() OR is_active = FALSE
`

func (q *Queries) DeleteExpired(ctx context.Context) (int64, error) {
	result, err := q.db.Exec(ctx, deleteExpired)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getByID = `-- name: GetByID :one
SELECT id, user_id, is_active, expiration_date FROM refresh_tokens WHERE id = $1
`

func (q *Queries) GetByID(ctx context.Context, id uuid.UUID) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, getByID, id)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IsActive,
		&i.ExpirationDate,
	)
	return i, err
}

const getUserIDByRefreshToken = `-- name: GetUserIDByRefreshToken :one
SELECT user_id FROM refresh_tokens WHERE id = $1 AND is_active = TRUE
`

func (q *Queries) GetUserIDByRefreshToken(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, getUserIDByRefreshToken, id)
	var user_id uuid.UUID
	err := row.Scan(&user_id)
	return user_id, err
}

const inactivate = `-- name: Inactivate :one
UPDATE refresh_tokens SET is_active = FALSE WHERE id = $1 RETURNING id, user_id, is_active, expiration_date
`

func (q *Queries) Inactivate(ctx context.Context, id uuid.UUID) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, inactivate, id)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IsActive,
		&i.ExpirationDate,
	)
	return i, err
}

const inactivateByUserID = `-- name: InactivateByUserID :execrows
UPDATE refresh_tokens SET is_active = FALSE WHERE user_id = $1 RETURNING id, user_id, is_active, expiration_date
`

func (q *Queries) InactivateByUserID(ctx context.Context, userID uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, inactivateByUserID, userID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
