// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package inbox

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getById = `-- name: GetById :one
SELECT uim.id, user_id, message_id, is_read, is_starred, is_archived, im.id, posted_by, title, subtitle, type, content_id, created_at, updated_at
FROM user_inbox_messages uim
JOIN inbox_message im ON uim.message_id = im.id
WHERE uim.id = $1 AND uim.user_id = $2
`

type GetByIdParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

type GetByIdRow struct {
	ID         uuid.UUID
	UserID     uuid.UUID
	MessageID  uuid.UUID
	IsRead     bool
	IsStarred  bool
	IsArchived bool
	ID_2       uuid.UUID
	PostedBy   uuid.UUID
	Title      string
	Subtitle   pgtype.Text
	Type       ContentType
	ContentID  pgtype.UUID
	CreatedAt  pgtype.Timestamp
	UpdatedAt  pgtype.Timestamp
}

func (q *Queries) GetById(ctx context.Context, arg GetByIdParams) (GetByIdRow, error) {
	row := q.db.QueryRow(ctx, getById, arg.ID, arg.UserID)
	var i GetByIdRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.MessageID,
		&i.IsRead,
		&i.IsStarred,
		&i.IsArchived,
		&i.ID_2,
		&i.PostedBy,
		&i.Title,
		&i.Subtitle,
		&i.Type,
		&i.ContentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const list = `-- name: List :many
SELECT uim.id, user_id, message_id, is_read, is_starred, is_archived, im.id, posted_by, title, subtitle, type, content_id, created_at, updated_at
FROM user_inbox_messages uim
JOIN inbox_message im ON uim.message_id = im.id
WHERE uim.user_id = $1
`

type ListRow struct {
	ID         uuid.UUID
	UserID     uuid.UUID
	MessageID  uuid.UUID
	IsRead     bool
	IsStarred  bool
	IsArchived bool
	ID_2       uuid.UUID
	PostedBy   uuid.UUID
	Title      string
	Subtitle   pgtype.Text
	Type       ContentType
	ContentID  pgtype.UUID
	CreatedAt  pgtype.Timestamp
	UpdatedAt  pgtype.Timestamp
}

func (q *Queries) List(ctx context.Context, userID uuid.UUID) ([]ListRow, error) {
	rows, err := q.db.Query(ctx, list, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListRow
	for rows.Next() {
		var i ListRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.MessageID,
			&i.IsRead,
			&i.IsStarred,
			&i.IsArchived,
			&i.ID_2,
			&i.PostedBy,
			&i.Title,
			&i.Subtitle,
			&i.Type,
			&i.ContentID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateById = `-- name: UpdateById :one
UPDATE user_inbox_messages AS uim
SET is_read = $3, is_starred = $4, is_archived = $5
FROM inbox_message AS im
WHERE uim.message_id = im.id AND uim.id = $1 AND uim.user_id = $2
RETURNING im.id, posted_by, title, subtitle, type, content_id, created_at, updated_at, uim.id, user_id, message_id, is_read, is_starred, is_archived
`

type UpdateByIdParams struct {
	ID         uuid.UUID
	UserID     uuid.UUID
	IsRead     bool
	IsStarred  bool
	IsArchived bool
}

type UpdateByIdRow struct {
	ID         uuid.UUID
	PostedBy   uuid.UUID
	Title      string
	Subtitle   pgtype.Text
	Type       ContentType
	ContentID  pgtype.UUID
	CreatedAt  pgtype.Timestamp
	UpdatedAt  pgtype.Timestamp
	ID_2       uuid.UUID
	UserID     uuid.UUID
	MessageID  uuid.UUID
	IsRead     bool
	IsStarred  bool
	IsArchived bool
}

func (q *Queries) UpdateById(ctx context.Context, arg UpdateByIdParams) (UpdateByIdRow, error) {
	row := q.db.QueryRow(ctx, updateById,
		arg.ID,
		arg.UserID,
		arg.IsRead,
		arg.IsStarred,
		arg.IsArchived,
	)
	var i UpdateByIdRow
	err := row.Scan(
		&i.ID,
		&i.PostedBy,
		&i.Title,
		&i.Subtitle,
		&i.Type,
		&i.ContentID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID_2,
		&i.UserID,
		&i.MessageID,
		&i.IsRead,
		&i.IsStarred,
		&i.IsArchived,
	)
	return i, err
}
