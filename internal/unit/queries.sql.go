// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package unit

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addOrgMember = `-- name: AddOrgMember :one
INSERT INTO org_members (org_id, member_id)
VALUES ($1, $2)
RETURNING org_id, member_id
`

type AddOrgMemberParams struct {
	OrgID    uuid.UUID
	MemberID uuid.UUID
}

func (q *Queries) AddOrgMember(ctx context.Context, arg AddOrgMemberParams) (OrgMember, error) {
	row := q.db.QueryRow(ctx, addOrgMember, arg.OrgID, arg.MemberID)
	var i OrgMember
	err := row.Scan(&i.OrgID, &i.MemberID)
	return i, err
}

const addParentChild = `-- name: AddParentChild :one
INSERT INTO parent_child (parent_id, child_id, org_id)
VALUES ($1, $2, $3)
RETURNING parent_id, child_id, org_id
`

type AddParentChildParams struct {
	ParentID pgtype.UUID
	ChildID  uuid.UUID
	OrgID    uuid.UUID
}

func (q *Queries) AddParentChild(ctx context.Context, arg AddParentChildParams) (ParentChild, error) {
	row := q.db.QueryRow(ctx, addParentChild, arg.ParentID, arg.ChildID, arg.OrgID)
	var i ParentChild
	err := row.Scan(&i.ParentID, &i.ChildID, &i.OrgID)
	return i, err
}

const addUnitMember = `-- name: AddUnitMember :one
INSERT INTO unit_members (unit_id, member_id)
VALUES ($1, $2)
RETURNING unit_id, member_id
`

type AddUnitMemberParams struct {
	UnitID   uuid.UUID
	MemberID uuid.UUID
}

func (q *Queries) AddUnitMember(ctx context.Context, arg AddUnitMemberParams) (UnitMember, error) {
	row := q.db.QueryRow(ctx, addUnitMember, arg.UnitID, arg.MemberID)
	var i UnitMember
	err := row.Scan(&i.UnitID, &i.MemberID)
	return i, err
}

const createOrg = `-- name: CreateOrg :one
INSERT INTO organizations (name, owner_id, description, metadata, slug)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, owner_id, name, description, metadata, slug, created_at, updated_at
`

type CreateOrgParams struct {
	Name        pgtype.Text
	OwnerID     pgtype.UUID
	Description pgtype.Text
	Metadata    []byte
	Slug        string
}

func (q *Queries) CreateOrg(ctx context.Context, arg CreateOrgParams) (Organization, error) {
	row := q.db.QueryRow(ctx, createOrg,
		arg.Name,
		arg.OwnerID,
		arg.Description,
		arg.Metadata,
		arg.Slug,
	)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Description,
		&i.Metadata,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUnit = `-- name: CreateUnit :one
INSERT INTO units (name, org_id, description, metadata)
VALUES ($1, $2, $3, $4)
RETURNING id, org_id, type, name, description, metadata, created_at, updated_at
`

type CreateUnitParams struct {
	Name        pgtype.Text
	OrgID       pgtype.UUID
	Description pgtype.Text
	Metadata    []byte
}

func (q *Queries) CreateUnit(ctx context.Context, arg CreateUnitParams) (Unit, error) {
	row := q.db.QueryRow(ctx, createUnit,
		arg.Name,
		arg.OrgID,
		arg.Description,
		arg.Metadata,
	)
	var i Unit
	err := row.Scan(
		&i.ID,
		&i.OrgID,
		&i.Type,
		&i.Name,
		&i.Description,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUnitWithID = `-- name: CreateUnitWithID :one
INSERT INTO units (id, name, org_id, description, metadata)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, org_id, type, name, description, metadata, created_at, updated_at
`

type CreateUnitWithIDParams struct {
	ID          uuid.UUID
	Name        pgtype.Text
	OrgID       pgtype.UUID
	Description pgtype.Text
	Metadata    []byte
}

func (q *Queries) CreateUnitWithID(ctx context.Context, arg CreateUnitWithIDParams) (Unit, error) {
	row := q.db.QueryRow(ctx, createUnitWithID,
		arg.ID,
		arg.Name,
		arg.OrgID,
		arg.Description,
		arg.Metadata,
	)
	var i Unit
	err := row.Scan(
		&i.ID,
		&i.OrgID,
		&i.Type,
		&i.Name,
		&i.Description,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOrg = `-- name: DeleteOrg :exec
DELETE FROM organizations WHERE id = $1
`

func (q *Queries) DeleteOrg(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteOrg, id)
	return err
}

const deleteUnit = `-- name: DeleteUnit :exec
DELETE FROM units WHERE id = $1
`

func (q *Queries) DeleteUnit(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUnit, id)
	return err
}

const getAllOrganizations = `-- name: GetAllOrganizations :many
SELECT id, owner_id, name, description, metadata, slug, created_at, updated_at FROM organizations
`

func (q *Queries) GetAllOrganizations(ctx context.Context) ([]Organization, error) {
	rows, err := q.db.Query(ctx, getAllOrganizations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Name,
			&i.Description,
			&i.Metadata,
			&i.Slug,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrgByID = `-- name: GetOrgByID :one
SELECT id, owner_id, name, description, metadata, slug, created_at, updated_at FROM organizations WHERE id = $1
`

func (q *Queries) GetOrgByID(ctx context.Context, id uuid.UUID) (Organization, error) {
	row := q.db.QueryRow(ctx, getOrgByID, id)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Description,
		&i.Metadata,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrgIDBySlug = `-- name: GetOrgIDBySlug :one
SELECT id FROM organizations WHERE slug = $1
`

func (q *Queries) GetOrgIDBySlug(ctx context.Context, slug string) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, getOrgIDBySlug, slug)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getUnitByID = `-- name: GetUnitByID :one
SELECT id, org_id, type, name, description, metadata, created_at, updated_at FROM units WHERE id = $1
`

func (q *Queries) GetUnitByID(ctx context.Context, id uuid.UUID) (Unit, error) {
	row := q.db.QueryRow(ctx, getUnitByID, id)
	var i Unit
	err := row.Scan(
		&i.ID,
		&i.OrgID,
		&i.Type,
		&i.Name,
		&i.Description,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listOrgMembers = `-- name: ListOrgMembers :many
SELECT member_id FROM org_members WHERE org_id = $1
`

func (q *Queries) ListOrgMembers(ctx context.Context, orgID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.Query(ctx, listOrgMembers, orgID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var member_id uuid.UUID
		if err := rows.Scan(&member_id); err != nil {
			return nil, err
		}
		items = append(items, member_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrgSubUnitIDs = `-- name: ListOrgSubUnitIDs :many
SELECT child_id FROM parent_child WHERE parent_id = $1
`

func (q *Queries) ListOrgSubUnitIDs(ctx context.Context, parentID pgtype.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.Query(ctx, listOrgSubUnitIDs, parentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var child_id uuid.UUID
		if err := rows.Scan(&child_id); err != nil {
			return nil, err
		}
		items = append(items, child_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrgSubUnits = `-- name: ListOrgSubUnits :many
SELECT u.id, u.org_id, u.type, u.name, u.description, u.metadata, u.created_at, u.updated_at FROM units u
JOIN parent_child pc ON u.id = pc.child_id
WHERE pc.parent_id = $1
`

func (q *Queries) ListOrgSubUnits(ctx context.Context, parentID pgtype.UUID) ([]Unit, error) {
	rows, err := q.db.Query(ctx, listOrgSubUnits, parentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Unit
	for rows.Next() {
		var i Unit
		if err := rows.Scan(
			&i.ID,
			&i.OrgID,
			&i.Type,
			&i.Name,
			&i.Description,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSubUnitIDs = `-- name: ListSubUnitIDs :many
SELECT child_id FROM parent_child WHERE parent_id = $1
`

func (q *Queries) ListSubUnitIDs(ctx context.Context, parentID pgtype.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.Query(ctx, listSubUnitIDs, parentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var child_id uuid.UUID
		if err := rows.Scan(&child_id); err != nil {
			return nil, err
		}
		items = append(items, child_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSubUnits = `-- name: ListSubUnits :many
SELECT u.id, u.org_id, u.type, u.name, u.description, u.metadata, u.created_at, u.updated_at FROM units u
JOIN parent_child pc ON u.id = pc.child_id
WHERE pc.parent_id = $1
`

func (q *Queries) ListSubUnits(ctx context.Context, parentID pgtype.UUID) ([]Unit, error) {
	rows, err := q.db.Query(ctx, listSubUnits, parentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Unit
	for rows.Next() {
		var i Unit
		if err := rows.Scan(
			&i.ID,
			&i.OrgID,
			&i.Type,
			&i.Name,
			&i.Description,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUnitMembers = `-- name: ListUnitMembers :many
SELECT member_id FROM unit_members WHERE unit_id = $1
`

func (q *Queries) ListUnitMembers(ctx context.Context, unitID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.Query(ctx, listUnitMembers, unitID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var member_id uuid.UUID
		if err := rows.Scan(&member_id); err != nil {
			return nil, err
		}
		items = append(items, member_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUnitsMembers = `-- name: ListUnitsMembers :many
SELECT unit_id, member_id
FROM unit_members
WHERE unit_id = ANY($1::uuid[])
`

func (q *Queries) ListUnitsMembers(ctx context.Context, dollar_1 []uuid.UUID) ([]UnitMember, error) {
	rows, err := q.db.Query(ctx, listUnitsMembers, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UnitMember
	for rows.Next() {
		var i UnitMember
		if err := rows.Scan(&i.UnitID, &i.MemberID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeOrgMember = `-- name: RemoveOrgMember :exec
DELETE FROM org_members WHERE org_id = $1 AND member_id = $2
`

type RemoveOrgMemberParams struct {
	OrgID    uuid.UUID
	MemberID uuid.UUID
}

func (q *Queries) RemoveOrgMember(ctx context.Context, arg RemoveOrgMemberParams) error {
	_, err := q.db.Exec(ctx, removeOrgMember, arg.OrgID, arg.MemberID)
	return err
}

const removeParentChild = `-- name: RemoveParentChild :exec
DELETE FROM parent_child WHERE child_id = $1
`

func (q *Queries) RemoveParentChild(ctx context.Context, childID uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeParentChild, childID)
	return err
}

const removeUnitMember = `-- name: RemoveUnitMember :exec
DELETE FROM unit_members WHERE unit_id = $1 AND member_id = $2
`

type RemoveUnitMemberParams struct {
	UnitID   uuid.UUID
	MemberID uuid.UUID
}

func (q *Queries) RemoveUnitMember(ctx context.Context, arg RemoveUnitMemberParams) error {
	_, err := q.db.Exec(ctx, removeUnitMember, arg.UnitID, arg.MemberID)
	return err
}

const updateOrg = `-- name: UpdateOrg :one
UPDATE organizations
SET slug = $2, name = $3, description = $4, metadata = $5, updated_at = now()
WHERE id = $1
RETURNING id, owner_id, name, description, metadata, slug, created_at, updated_at
`

type UpdateOrgParams struct {
	ID          uuid.UUID
	Slug        string
	Name        pgtype.Text
	Description pgtype.Text
	Metadata    []byte
}

func (q *Queries) UpdateOrg(ctx context.Context, arg UpdateOrgParams) (Organization, error) {
	row := q.db.QueryRow(ctx, updateOrg,
		arg.ID,
		arg.Slug,
		arg.Name,
		arg.Description,
		arg.Metadata,
	)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Description,
		&i.Metadata,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUnit = `-- name: UpdateUnit :one
UPDATE units
SET name = $2, description = $3, metadata = $4, updated_at = now()
WHERE id = $1
RETURNING id, org_id, type, name, description, metadata, created_at, updated_at
`

type UpdateUnitParams struct {
	ID          uuid.UUID
	Name        pgtype.Text
	Description pgtype.Text
	Metadata    []byte
}

func (q *Queries) UpdateUnit(ctx context.Context, arg UpdateUnitParams) (Unit, error) {
	row := q.db.QueryRow(ctx, updateUnit,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Metadata,
	)
	var i Unit
	err := row.Scan(
		&i.ID,
		&i.OrgID,
		&i.Type,
		&i.Name,
		&i.Description,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
