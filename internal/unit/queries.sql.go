// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package unit

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addParentChild = `-- name: AddParentChild :one
INSERT INTO parent_child (parent_id, child_id)
VALUES ($1, $2)
RETURNING parent_id, child_id
`

type AddParentChildParams struct {
	ParentID uuid.UUID
	ChildID  uuid.UUID
}

func (q *Queries) AddParentChild(ctx context.Context, arg AddParentChildParams) (ParentChild, error) {
	row := q.db.QueryRow(ctx, addParentChild, arg.ParentID, arg.ChildID)
	var i ParentChild
	err := row.Scan(&i.ParentID, &i.ChildID)
	return i, err
}

const createOrg = `-- name: CreateOrg :one
INSERT INTO organizations (name, description, metadata, type, slug)
VALUES ($1, $2, $3, 'organization', $4)
RETURNING id, name, description, metadata, type, slug, created_at, updated_at
`

type CreateOrgParams struct {
	Name        pgtype.Text
	Description pgtype.Text
	Metadata    []byte
	Slug        string
}

func (q *Queries) CreateOrg(ctx context.Context, arg CreateOrgParams) (Organization, error) {
	row := q.db.QueryRow(ctx, createOrg,
		arg.Name,
		arg.Description,
		arg.Metadata,
		arg.Slug,
	)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Metadata,
		&i.Type,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUnit = `-- name: CreateUnit :one
INSERT INTO units (name, description, metadata, type)
VALUES ($1, $2, $3, 'unit')
RETURNING id, name, description, metadata, type, created_at, updated_at
`

type CreateUnitParams struct {
	Name        pgtype.Text
	Description pgtype.Text
	Metadata    []byte
}

func (q *Queries) CreateUnit(ctx context.Context, arg CreateUnitParams) (Unit, error) {
	row := q.db.QueryRow(ctx, createUnit, arg.Name, arg.Description, arg.Metadata)
	var i Unit
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Metadata,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrgByID = `-- name: GetOrgByID :one
SELECT id, name, description, metadata, type, slug, created_at, updated_at FROM organizations WHERE id = $1
`

func (q *Queries) GetOrgByID(ctx context.Context, id uuid.UUID) (Organization, error) {
	row := q.db.QueryRow(ctx, getOrgByID, id)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Metadata,
		&i.Type,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrgIDBySlug = `-- name: GetOrgIDBySlug :one
SELECT id FROM organizations WHERE slug = $1
`

func (q *Queries) GetOrgIDBySlug(ctx context.Context, slug string) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, getOrgIDBySlug, slug)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getUnitByID = `-- name: GetUnitByID :one
SELECT id, name, description, metadata, type, created_at, updated_at FROM units WHERE id = $1
`

func (q *Queries) GetUnitByID(ctx context.Context, id uuid.UUID) (Unit, error) {
	row := q.db.QueryRow(ctx, getUnitByID, id)
	var i Unit
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Metadata,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listSubUnitIDs = `-- name: ListSubUnitIDs :many
SELECT child_id FROM parent_child WHERE parent_id = $1
`

func (q *Queries) ListSubUnitIDs(ctx context.Context, parentID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.Query(ctx, listSubUnitIDs, parentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var child_id uuid.UUID
		if err := rows.Scan(&child_id); err != nil {
			return nil, err
		}
		items = append(items, child_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSubUnits = `-- name: ListSubUnits :many
SELECT u.id, u.name, u.description, u.metadata, u.type, u.created_at, u.updated_at FROM units u
JOIN parent_child pc ON u.id = pc.child_id
WHERE pc.parent_id = $1
`

func (q *Queries) ListSubUnits(ctx context.Context, parentID uuid.UUID) ([]Unit, error) {
	rows, err := q.db.Query(ctx, listSubUnits, parentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Unit
	for rows.Next() {
		var i Unit
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Metadata,
			&i.Type,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
